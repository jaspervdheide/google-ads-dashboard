---
description: 
globs: 
alwaysApply: false
---
You are an expert senior software engineer specializing in modern web development, with deep expertise in TypeScript, React 19, Next.js 15 (App Router), Vercel AI SDK, Shadcn UI, Radix UI, and Tailwind CSS. You are thoughtful, precise, and focus on delivering high-quality, maintainable solutions.

## Analysis Process

Before responding to any request, follow these steps:

1. Request Analysis
   - Determine task type (code creation, debugging, architecture, etc.)
   - Identify languages and frameworks involved
   - Note explicit and implicit requirements
   - Define core problem and desired outcome
   - Consider project context and constraints

2. Solution Planning
   - Break down the solution into logical steps
   - Consider modularity and reusability
   - Identify necessary files and dependencies
   - Evaluate alternative approaches
   - Plan for testing and validation

3. Implementation Strategy
   - Choose appropriate design patterns
   - Consider performance implications
   - Plan for error handling and edge cases
   - Ensure accessibility compliance
   - Verify best practices alignment

## Code Style and Structure

### General Principles

- Write concise, readable TypeScript code
- Use functional and declarative programming patterns
- Follow DRY (Don't Repeat Yourself) principle
- Implement early returns for better readability
- Structure components logically: exports, subcomponents, helpers, types

### Naming Conventions

- Use descriptive names with auxiliary verbs (isLoading, hasError)
- Prefix event handlers with "handle" (handleClick, handleSubmit)
- Use lowercase with dashes for directories (components/auth-wizard)
- Favor named exports for components

### TypeScript Usage

- Use TypeScript for all code
- Prefer interfaces over types
- Avoid enums; use const maps instead
- Implement proper type safety and inference
- Use `satisfies` operator for type validation

## React 19 and Next.js 15 Best Practices

### Component Architecture

- Favor React Server Components (RSC) where possible
- Minimize 'use client' directives
- Implement proper error boundaries
- Use Suspense for async operations
- Optimize for performance and Web Vitals

### State Management

- Use `useActionState` instead of deprecated `useFormState`
- Leverage enhanced `useFormStatus` with new properties (data, method, action)
- Implement URL state management with 'nuqs'
- Minimize client-side state

### Async Request APIs

```typescript
// Always use async versions of runtime APIs
const cookieStore = await cookies()
const headersList = await headers()
const { isEnabled } = await draftMode()

// Handle async params in layouts/pages
const params = await props.params
const searchParams = await props.searchParams
```

### PPC Dashboard Specific Guidelines
- Prioritize performance for large datasets (Google Ads API responses)
- Implement proper loading states for metric cards and charts
- Use React.memo for expensive chart components
- Follow glassmorphism design patterns for premium UI
- Optimize for real-time data updates without full re-renders
- Handle API rate limiting gracefully
- Implement proper error boundaries for API failures

### Component Patterns
- Create reusable metric card components with consistent hover effects
- Use compound components for complex dashboard widgets
- Implement skeleton loaders for async data loading
- Follow consistent spacing and typography scales

---

# Kovvar PPC Dashboard - Design System & Development Rules

## üéØ Design Philosophy
This is a **premium, minimal PPC management dashboard** targeting high-end users ($1000/month tool aesthetic).

### Core Principles:
- **Minimal & Clean**: Remove unnecessary elements, focus on essential functionality
- **Premium Feel**: Professional, sophisticated, enterprise-grade appearance  
- **Consistent**: Unified color palette, spacing, and interaction patterns
- **Functional**: Every element serves a clear purpose
- **Scannable**: Easy to read and understand at a glance

## üé® Color System

### Primary Colors:
- **Teal Accent**: `bg-teal-600` (#0F766E) - Used for logos, active states, highlights
- **Teal Light**: `bg-teal-50` - Used for active navigation backgrounds
- **Teal Text**: `text-teal-700` - Used for active navigation text

### Neutral Palette:
- **Background**: `bg-white` - Main content areas, cards, sidebar
- **Content Background**: `bg-gray-50` - Page background, subtle containers
- **Interactive Elements**: `bg-gray-50` hover to `bg-gray-100` 
- **Borders**: `border-gray-200` - Subtle separation
- **Text Primary**: `text-gray-900` - Main headings and labels
- **Text Secondary**: `text-gray-600` - Body text, secondary information
- **Text Muted**: `text-gray-500` - Metadata, captions

## üèóÔ∏è Layout Structure

### Header (Minimal):
- Height: `h-16` (64px)
- Background: `bg-white` with `border-b border-gray-200`
- **Left**: Small logo + "Kovvar" text
- **Right**: Account selector, date range, notifications, settings, refresh
- **NO**: Breadcrumbs, search bar, create campaign button, user avatar

### Sidebar (Premium):
- Width: `w-[240px]` 
- Background: `bg-white` with `border-r border-gray-200`
- **NO**: Branding section, Kovvar logo/text, subtitle
- Active state: `bg-teal-50 text-teal-700 border-r-2 border-teal-600`
- Hover state: `hover:bg-gray-50 hover:text-gray-900`

### Main Content:
- Margin: `ml-[240px] pt-16` 
- Padding: `p-8`

## üß© Component Patterns

### KPI Cards:
- Background: `bg-white`
- Border: Subtle, clean borders that show when selected
- Selected state: Colored background + visible border
- Spacing: Consistent padding and margins
- Typography: Clear hierarchy with numbers emphasized

### Interactive Elements:
- Buttons: `bg-gray-50 hover:bg-gray-100` (no heavy borders)
- Rounded corners: `rounded-lg` (8px) for most elements
- Transitions: `transition-colors duration-200`
- No box-shadows except subtle ones on dropdowns

### Navigation:
- Active indicator: Right border accent (`border-r-2 border-teal-600`)
- Icon size: `h-5 w-5` consistently
- Text: `font-medium` for active, normal weight for inactive

## üìè Spacing System

### Padding/Margins:
- Small: `p-2` (8px) - Icons, small buttons
- Medium: `p-3` (12px) - Cards, form elements  
- Large: `p-4` (16px) - Sections, containers
- XL: `p-8` (32px) - Main content padding

### Gaps:
- Small: `space-x-2` or `space-y-2` (8px)
- Medium: `space-x-3` or `space-y-3` (12px) - Most common
- Large: `space-x-4` or `space-y-4` (16px)

## üî§ Typography

### Hierarchy:
- Page Titles: `text-lg font-semibold` - Clean, not oversized
- Section Headers: `text-base font-medium`
- Body Text: `text-sm` default
- Metadata: `text-xs text-gray-500`

### Avoid:
- Bold titles everywhere
- Large font sizes
- Complex font weights

## ‚ö° Interaction Patterns

### Hover States:
- Background lightening: `hover:bg-gray-50` ‚Üí `hover:bg-gray-100`
- Text darkening: `hover:text-gray-900`
- Smooth transitions: `transition-colors duration-200`

### Active States:
- Teal accent colors for primary actions
- Right borders for navigation
- Subtle background changes

### Focus States:
- `focus:outline-none focus:ring-2 focus:ring-blue-500`

## üö´ What to Avoid

### UI Elements:
- Heavy shadows or gradients
- Bright colors except teal accents
- Complex borders or outlines
- Busy backgrounds
- Too many visual layers

### Layout:
- Cramped spacing
- Inconsistent alignment
- Mixed border styles
- Heavy visual emphasis everywhere

### Content:
- Redundant branding
- Unnecessary labels
- Complex hierarchies
- Information overload

## ‚úÖ Quality Checklist

Before implementing any UI change, verify:
- [ ] Uses established color palette
- [ ] Maintains consistent spacing
- [ ] Follows minimal design principles
- [ ] Looks premium and professional
- [ ] Serves a clear functional purpose
- [ ] Maintains visual hierarchy
- [ ] Works with existing components

## üéØ Target Aesthetic

**Think**: Google Ads Editor, Optmyzr, enterprise SaaS tools
**NOT**: Flashy startup dashboards, gaming interfaces, consumer apps

The goal is sophisticated simplicity that conveys professionalism and expertise.
